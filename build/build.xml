<?xml version="1.0" encoding="UTF-8"?>
<project name="Calendar" basedir="../" default="all">

    <!-- Main target that does all -->
    <target name="all" depends="compile, widgetset, tests, manual, package-jar, package-zip, demo.war"/>

    <!-- Non-project specific settings. -->
	<property file="build/build.properties" />
	<property name="configure.libs" value="" />
	<property name="module.junit.dir" value="${basedir}/build/result/unittests" />

    <!-- ================================================================== -->
    <!-- Initialization                                                     -->
    <!-- ================================================================== -->

    <!-- Clean old compilation results. -->
	<target name="clean-all">
		<delete dir="${result-path}" includes="**/*" followsymlinks="false" includeemptydirs="true" defaultexcludes="false" failonerror="false"/>
	</target>

    <!-- Checks that all the required libraries exist. -->
	<target name="check-libs">
		<available file="${gwt.lib.dir}/gwt-user.jar" property="gwt-user.present" />
		<available file="${gwt.lib.dir}/gwt-dev.jar" property="gwt-dev.present" />

		<fail message="${gwt.lib.dir}/gwt-user.jar missing" unless="gwt-user.present" />
		<fail message="${gwt.lib.dir}/gwt-dev.jar missing" unless="gwt-dev.present" />
	</target>

    <!-- Initialization -->
	<target name="init">
		<echo>Requirements for classpath:</echo>
		<echo> ${gwt.lib.dir}/gwt-user.jar</echo>
		<echo> ${gwt.lib.dir}/gwt-dev.jar</echo>

		<antcall target="check-libs"/>

	    <path id="test.classpath">
		    <fileset dir="build/lib">
			    <include name="**/*.jar" />
            </fileset>

            <fileset dir="WebContent/WEB-INF/lib">
                <include name="**/*.jar" />
            </fileset>
        </path>

        <path id="compile.classpath">
            <fileset dir="build/lib">
                <include name="junit-4.5.jar" />
            </fileset>
        </path>
	</target>

    <!-- Fetch repository changes -->
	<target name="svn-update" unless="eclipse.running">
		<exec executable="svn">
			<arg line="update" />
		</exec>
	</target>

    <!-- ================================================================== -->
    <!-- Compilation                                                        -->
    <!-- ================================================================== -->

    <!-- Compile server-side Java -->
	<target name="compile" depends="init" unless="run.no-compile">
        <property name="result.classes" value="${result-path}/war/WEB-INF/classes"/>

        <mkdir dir="${result.classes}"/>
        
		<javac destdir="${result.classes}" target="1.5" source="1.5">
			<src path="src" />
			<src path="${test.src.base}" />
			<src path="${demo.src.base}" />
			<include name="**/*.*" />

			<classpath refid="test.classpath" />
			<classpath refid="compile.classpath" />
			<classpath>
				<path path="src" />
				<path path="test-src" />
				<path path="WebContent/WEB-INF/classes" />
				<path path="${gwt.lib.dir}/gwt-user.jar" />
				<path path="${gwt.lib.dir}/gwt-dev.jar" />
			</classpath>
		</javac>

	</target>

    <!-- Check if there are new modifications to widgetset sources -->
	<target name="check-widgetset-uptodate">
		<echo>Checking if widgetset needs to be rebuilt</echo>
		<uptodate targetfile="WebContent/VAADIN/widgetsets/.widgetset" property="widgetset.uptodate">
			<srcfiles dir="src" includes="**/gwt/**/*" />
		</uptodate>
	</target>

    <!-- Refresh the project in a locally running Eclipse. -->
	<target name="refresh-eclipse" if="eclipse.running">
		<echo>Refreshing project folder</echo>
		<eclipse.refreshLocal resource="CalendarTest" depth="infinite" />
	</target>

    <!-- Compile client-side Java -->
	<target name="widgetset" depends="init,check-widgetset-uptodate" unless="widgetset.uptodate, run.no-tests">
		<echo>Compiling widgetset</echo>

		<java classname="com.vaadin.tools.WidgetsetCompiler" failonerror="yes" fork="yes" maxmemory="512m">
			<arg value="-out" />
			<arg value="WebContent/VAADIN/widgetsets" />
			<arg value="com.vaadin.addon.calendar.gwt.CalendarWidgetset" />
			<jvmarg value="-Xss1024k" />
			<jvmarg value="-Xmx1024M" />
			<jvmarg value="-Djava.awt.headless=true" />
			<classpath>
				<path path="src" />
				<path path="${basedir}/${result-path}/war/WEB-INF/classes" />
				<path path="WebContent/WEB-INF/classes" />
				<fileset dir="build/lib/gwt">
					<include name="**/gwt-*.jar" />
				</fileset>
				<fileset dir="${gwt.lib.dir}">
					<include name="**/gwt-*.jar" />
				</fileset>
				<fileset dir="WebContent/WEB-INF/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</java>

		<touch file="WebContent/VAADIN/widgetsets/.widgetset" verbose="true" />

		<antcall target="refresh-eclipse" />
	</target>

    <!-- ================================================================== -->
    <!-- Testing                                                            -->
    <!-- ================================================================== -->

    <!-- Vaadin TestBench tests -->
	<target name="testbench-tests">
		<subant target="run-and-clean-up" antfile="test.xml">
			<fileset dir="test" includes="test.xml"/>
		</subant>
	</target>

    <!-- Server-side JUnit tests -->
	<target name="serverside-tests" depends="compile">
        <echo>Running JUnit tests in ${test.src.base}/${test.src.dir}</echo>

        <echo>Test source base: ${test.src.base}</echo>
        <echo>Test source dir:  ${test.src.dir}</echo>

		<junit printsummary="yes" showoutput="true"> 
			<classpath>
				<pathelement path="${result.classes}" />
				<path refid="compile.classpath"/>
                <path refid="test.classpath"/>
			</classpath>

			<batchtest fork="yes">
				<fileset dir="${test.src.base}" includes="${test.src.dir}/**/*.java"/>
			</batchtest>
		</junit>
    </target>

    <target name="tests" depends="serverside-tests" unless="run.no-tests"/>

    <!-- ================================================================== -->
    <!-- Documentation                                                      -->
    <!-- ================================================================== -->

    <!-- Manual -->
    <target name="manual" unless="run.no-manual">
        <!-- Must delete the old version or conversion fails -->
        <delete file="${manual.pdf}"/>

        <!-- Start OpenOffice service -->
        <exec executable="python" searchpath="true" failonerror="true" >
            <arg value="build/odf-converter.py"/>
            <arg value="start"/>
        </exec>

        <!-- Convert the ODF text document to PDF -->
        <java jar="build/lib/jodconverter/jodconverter-cli-2.2.2.jar" fork="true">
            <arg value="${manual.odt}"/>
            <arg value="${manual.pdf}"/>
        </java>

        <!-- Stop OpenOffice service -->
        <exec executable="python" searchpath="true" failonerror="true" >
            <arg value="build/odf-converter.py"/>
            <arg value="stop"/>
        </exec>
    </target>

    <!-- ================================================================== -->
    <!-- Packaging                                                          -->
    <!-- ================================================================== -->

    <!-- Create the JAR package. -->
    <target name="package-jar" depends="compile" unless="run.no-package-jar">
        <property name="jar.name" value="${addon.name}-${version}.jar"/>
        <property name="jar.path" value="${result-path}/${jar.name}"/>

        <jar jarfile="${jar.path}" compress="true">
            <manifest>
                <attribute name="Vaadin-Package-Version" value="1" />
                <attribute name="Vaadin-Widgetsets" value="${addon.widgetset}" />
                <attribute name="Implementation-Title" value="${addon.title}" />
                <attribute name="Implementation-Version" value="${version}" />
                <attribute name="Implementation-Vendor" value="${addon.vendor}" />
            </manifest>
        	
        	<!-- The built server-side classes and the widget set class are here. -->
            <fileset dir="${result.classes}">
                <patternset>
                    <include name="${src.package.dir}/**/*" />
                	<exclude name="**/test/**" />
                </patternset>
            </fileset>

        	<!-- Especially all the widget set source files are required. -->
        	<fileset dir="src">
                <patternset>
                    <include name="${src.package.dir}/gwt/**/*" />
                	<exclude name="**/test/**" />
                </patternset>
            </fileset>

        	<!-- Include the built widget set and themes. -->
        	<fileset dir="WebContent">
                <patternset>
                    <include name="VAADIN/widgetsets/${addon.widgetset}/**/*" />
                	<include name="VAADIN/themes/**/*" />
                </patternset>
            </fileset>
        </jar>
	</target>		

    <!-- Create the ZIP distribution package. -->
    <target name="package-zip" depends="package-jar, manual" unless="run.no-package-jar">
        <property name="zip.name" value="${result-path}/${addon.name}-${version}.zip"/>

        <zip destfile="${zip.name}">
            <zipfileset prefix="${addon.name}-${version}" dir="${result-path}">
                <patternset>
                    <include name="${jar.name}" />
                </patternset>
            </zipfileset>
            <zipfileset prefix="${addon.name}-${version}" dir=".">
                <patternset>
                    <include name="${manual.pdf}" />
                </patternset>
            </zipfileset>
            <zipfileset prefix="${addon.name}-${version}" dir="doc">
                <patternset>
                    <include name="README.TXT" />
                </patternset>
            </zipfileset>
        </zip>
    </target>

	<target name="demo.war" depends="package-jar">
		<war destfile="${result-path}/${addon.name}-demo.war" webxml="WebContent/WEB-INF/web.xml">
			<classes dir="${result.classes}" includes="**/test/**"/>
			<lib dir="WebContent/WEB-INF/lib" excludes="*src*" />
			<lib file="${jar.path}" />
		</war>
	</target>
	
</project>

<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:4
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/etc/sgml/catalog" "/usr/share/xemacs21/xemacs-packages/etc/psgml-dtds/CATALOG")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/share/sgml/ECAT" "/usr/local/share/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
